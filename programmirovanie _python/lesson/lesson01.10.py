#алфавид генератор: chr(x) returns a letter given the letter code, ord(x) does the opposite
alph = [chr(x) for x in range(ord("а"), ord("я")+1)]
print(alph)

#текстовые файлы: таблица символов кодирует последовательность bits (0,1) как символ, 16bit для кодирование символ. операции: чтение из файла, запись. Открыть файл, первый шаг (ещё не чтение)
filename = "file.txt"
f = open(filename)
#относительный(где лежить интерпретатор Питон) и абсолютный путь: file.txt vs. C:\Users\student\file.txt
#dir1/nile.txt прямо работает, dir1*\n*ile.txt символ перевод строки. Надо написать dir1\\nile.txt (\ избежает специальные символы). "../../file.txt" 2 папки, выше на уровень (отн. путь).

f = open(filename, "r", encoding="utf-8") #стандартные значения: на чтение, кодировка символов utf-8
#старая кодировка "cp1251" на blocnote Windows для русского языка.
f.close() #в конце
with open(filename) as f: #в начале
#2 способа закрыт файл

s = f.read() #читать файл
f.close()
words = s.split() #файл сдерживается в s

lines = f.readlines()
f_lines = set(lines) #получаем уникальные строки

for line in f:
    print(line) #ещё способ работать с строками, лучше работает с большими файлами

f = open(filename, "w") #на запись, надо закрыть файл чтобы сохранять изменения!
f.write(string) #добавить string в файл, только вводят str type, надо превращать на int или float для чисел

f = open(filename, "a") #на запись, останавлывает содержание и добавляет новые строки в конце

#.csv, таблица текстов, состоит из строк и столбцов. строки - строки, колонки разделюся через , или ;

#функции: щас знаем об built in функциях (open(), len(), print(), type(), int(), т.д.). Как обявляться функции? В начале кода. это ограничивает функцию от остальной программы.

def text_proc(text): #def name of function(expected argument to input), можно передать любое число arg
    text = text.lower()
    words = text.split()
    for i,word in enumerate(words):
        words[i] = word.strip(".,!?;:")
    return words #это что мы получаем в программе, можно передать любое число arg

line = f.read()
line = text_proc(line)

print(text) #мы получаем ошибку, питон не знает что text (перемена внутри функции, и поэтому изолирована).

LIMIT = 5 #констант: напишем с большими буквами, функции могут использовать ин, не могут менять их.

import mod #import external module of functions
def f1():
def f2():
def f3():
#модули питон изпольняет сразу. функции работают только до сих пор, когда мы вызываем их.

if __name__ == "__main__":
    main()
#затем, что питон запускает функции, которые мы не видим. у них важние информации о программе и функции. Надо это написать в конце, чтобы инициализировать программу.

#prog.py
def main():
    f1()
    f2()
#1.py
import prog
t = prog.f2() #вызывает функцию f2 из prog.py

###лучше разбират код на функции(max 10-12 строки на функцию).###